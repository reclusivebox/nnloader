{"version":3,"sources":["webpack:///./src/utils/utils.tsx","webpack:///./src/components/tutorialNavigator.tsx","webpack:///./src/templates/markdown.tsx"],"names":["RawHTML","props","dangerouslySetInnerHTML","__html","content","LinkContainer","active","title","id","path","className","to","TutorialNavigator","items","Card","round","background","fill","CardHeader","pad","CardBody","map","BaseTemplate","data","tutorialItems","allMarkdownRemark","nodes","item","frontmatter","markdownRemark","html"],"mappings":"oPAIO,SAASA,EAAQC,GACtB,OAAO,yBAAKC,wBAAyB,CAACC,OAAQF,EAAMG,W,8DCGtD,SAASC,EAAT,GAAkD,IAA1BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,GAAIC,EAAO,EAAPA,KACzC,OACE,yBAAKC,UAAcJ,EAAQ,qBAAqB,gBAC9C,kBAAC,OAAD,CAAMK,GAAIF,GACPD,EADH,KACSD,IAMA,SAASK,EAAT,GAA4C,IAAhBN,EAAgB,EAAhBA,OAAQO,EAAQ,EAARA,MACjD,OACE,kBAACC,EAAA,EAAD,CACEC,MAAM,QACNC,WAAW,UACXC,MAAM,EACNP,UAAU,qBAEV,kBAACQ,EAAA,EAAD,CAAYC,IAAI,QAAQH,WAAW,WACjC,kDAEF,kBAACI,EAAA,EAAD,CAAUD,IAAI,UACXN,EAAMQ,KACH,YAAuB,IAArBb,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMF,EAAW,EAAXA,MACV,OAAO,kBAACF,EAAD,CACLC,OAAQE,IAAKF,EACbE,GAAIA,EACJD,MAAOA,EACPE,KAAMA,S,oBCxBP,SAASa,EAAT,GAA2C,IAApBC,EAAoB,EAApBA,KAC9BC,EAAgBD,EAAKE,kBAAkBC,MACxCL,KAAI,SAACM,GAAD,OAA8BA,EAAKC,eACtCtB,EAAiBiB,EAAKM,eAAeD,YAAYpB,GACvD,OACE,kBAAC,IAAD,KACE,yBAAKE,UAAU,iBACb,kBAACE,EAAD,CAAmBC,MAAOW,EAAelB,OAAQA,IACjD,yBAAKI,UAAU,mBACb,kBAACV,EAAD,CAASI,QAASmB,EAAKM,eAAeC","file":"component---src-templates-markdown-tsx-d8f5675f67796bdfa50a.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable require-jsdoc */\nimport React from 'react';\n\nexport function RawHTML(props: React.PropsWithChildren<{content: string}>) {\n  return <div dangerouslySetInnerHTML={{__html: props.content}} ></div>;\n}\n\n/**\n * A small function that gives you the index for the last common character\n * between two strings.\n * @param {string} string1 - One string to compare.\n * @param {string} string2 - The other string to compare.\n * @return {number} - The index of the last common character,\n * -1 if there isn't any.\n */\nexport function getLastCommonIndex(string1: string, string2: string): number {\n  const biggerString = (string1.length > string2.length)? string1 : string2;\n  const smallerString = (string1.length <= string2.length)? string1 : string2;\n  let commonIndexes = -1;\n\n  for (let index = 0; index < smallerString.length; index++) {\n    if (string1[index] === string2[index]) {\n      commonIndexes++;\n    } else {\n      return commonIndexes;\n    }\n  }\n  return commonIndexes;\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable require-jsdoc */\nimport React from 'react';\nimport {Card, CardHeader, CardBody} from 'grommet';\nimport {Link} from 'gatsby';\n\nimport '../styles/tutorialNavigator.scss';\n\nfunction LinkContainer({active, title, id, path}) {\n  return (\n    <div className={`${active? 'tutorialActiveLink':'tutorialLink'}`}>\n      <Link to={path}>\n        {id}. {title}\n      </Link>\n    </div>\n  );\n}\n\nexport default function TutorialNavigator({active, items}) {\n  return (\n    <Card\n      round=\"small\"\n      background=\"light-1\"\n      fill={false}\n      className=\"tutorialContainer\"\n    >\n      <CardHeader pad=\"small\" background=\"light-2\">\n        <h6>Tutorial Sections</h6>\n      </CardHeader>\n      <CardBody pad=\"medium\">\n        {items.map(\n            ({id, path, title}) => {\n              return <LinkContainer\n                active={id===active}\n                id={id}\n                title={title}\n                path={path}\n              />;\n            },\n        )}\n      </CardBody>\n    </Card>\n  );\n}\n\n","/* eslint-disable no-unused-vars */\n/* eslint-disable require-jsdoc */\nimport React from 'react';\nimport {graphql} from 'gatsby';\n// import {Grommet} from 'grommet';\nimport Base from './base';\nimport {RawHTML} from '../utils/utils';\nimport TutorialNavigator from '../components/tutorialNavigator';\n\nimport '../styles/tutorialPageTemplate.scss';\nimport '../styles/codeHighlight.scss';\n\nexport default function BaseTemplate({data}: {data: any}) {\n  const tutorialItems = data.allMarkdownRemark.nodes\n      .map((item: {frontmatter: any}) => item.frontmatter);\n  const active: number = data.markdownRemark.frontmatter.id;\n  return (\n    <Base>\n      <div className=\"pageContainer\">\n        <TutorialNavigator items={tutorialItems} active={active} />\n        <div className=\"markdownContent\">\n          <RawHTML content={data.markdownRemark.html} />\n        </div>\n      </div>\n    </Base>\n  );\n}\n\nexport const query = graphql`\n  query GetMarkdown($id: Int! = 1) {\n    markdownRemark(frontmatter: {id: {eq: $id}}) {\n      html\n      frontmatter {\n        id\n      }\n    }\n    allMarkdownRemark(sort: {fields: frontmatter___id}) {\n      nodes {\n        frontmatter {\n          id\n          path\n          title\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}