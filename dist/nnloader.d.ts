// Generated by dts-bundle v0.7.3

import * as commons from 'nnloader/--/lib/common';
import { loadString } from 'nnloader/--/lib/stringLoader';
import { loadJSON } from 'nnloader/--/lib/jsonLoader';
declare const _default: {
    commons: typeof commons;
    loadString: typeof loadString;
    loadJSON: typeof loadJSON;
};
export default _default;

/**
    * Error that hapens when you use this library outside a package scope.
    */
export declare class NoPackageError extends Error {
        message: string;
}
/**
    * Error that hapens when you don't pass a valid path to the library.
    */
export declare class InvalidPathError extends Error {
        message: string;
}
export declare type EncodingOptions = 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex';
/**
    * Returns the absolute path to the directory containing the package.json file.
    * @param {string} dirname - The directory containing the file calling this function, aways use the node variable __diname.
    */
export declare function getPackageDir(dirname: string): Promise<string>;

import { EncodingOptions } from 'nnloader/--/lib/common';
/**
  * Loads a string inside a file
  * @param {string} pathToFile - the path of the file to be loaded, relative to the package root.
  * @param {string} moduleDir - the absulute path of the file calling this function, aways use the node variable __dirname.
  * @param {EncodingOptions} encoding - the encoding of the file to load, the default is utf-8.
  * @returns {Promise<string>} - A promise to a string with the file's contents.
  */
export declare function loadString(pathToFile: string, moduleDir: string, encoding?: EncodingOptions): Promise<string>;

/**
  * Loads the content od a JSON file
  * @param {string} pathToFile - the path of the file to be loaded, relative to the package root.
  * @param {string} moduleDir - the absulute path of the file calling this function, aways use the node variable __dirname.
  * @returns {Promise<Object>} - A promise to an object with your JSON's contents.
  */
export declare function loadJSON(pathToFile: string, moduleDir: string): Promise<Object>;

