{"version":3,"sources":["webpack:///./src/components/dynamicTopBar.tsx","webpack:///./src/components/headerBar.tsx","webpack:///./src/images/logo.svg","webpack:///./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack:///./src/utils/responsiveWatcher.tsx","webpack:///./src/images/logoHover.svg"],"names":["useScrollHook","dynamicBarRef","useEffect","scrollEventHandler","event","visible","element","previousPosition","Number","current","dataset","previousScroll","state","window","pageYOffset","String","classList","remove","requestAnimationFrame","add","addEventListener","removeEventListener","DynamicTopBar","props","reference","useRef","ref","className","Header","elevation","background","fill","children","logo","require","logoHover","Entry","to","path","HeaderBar","bigScreen","useResponsiveWatcher","useState","currentLogo","setLogo","logoElement","src","onMouseOver","onMouseOut","justify","module","exports","_defineProperties","target","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","ResponsiveWatcher","query","this","callbackMap","Map","condition","matchMedia","newState","matches","Array","from","values","forEach","callback","Constructor","protoProps","staticProps","registerCallback","id","set","removeCallback","delete","containCallback","Symbol","has","includes","prototype","defaultWatcher","customWatcher","watcher","callbackId","updateComponent"],"mappings":"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","file":"10-7816a69577b05fe4ea82.js","sourcesContent":["import React, {MutableRefObject} from 'react';\nimport {useEffect, useRef} from 'react';\nimport {Header, BoxProps} from 'grommet';\n\nimport '../styles/dynamicTopBar.scss';\n\nfunction toggleVisibility(\n    reference: React.MutableRefObject<HTMLElement>,\n    visible: boolean,\n) {\n  const element = reference.current;\n\n  if (visible) {\n    element.classList.remove('slideOutTheTop');\n    window.requestAnimationFrame(() => {\n      element.classList.add('slideFromTop');\n    });\n  } else {\n    element.classList.remove('slideFromTop');\n\n    window.requestAnimationFrame(() => {\n      element.classList.add('slideOutTheTop');\n    });\n  }\n}\n\nfunction useScrollHook(\n    dynamicBarRef: React.MutableRefObject<HTMLElement>,\n) {\n  useEffect(() => {\n    dynamicBarRef.current.dataset.previousPosition = String(window.pageYOffset);\n    dynamicBarRef.current.dataset.previousScroll = 'noscroll';\n    function scrollEventHandler(event: Event) {\n      const previousPosition = Number(\n          dynamicBarRef.current.dataset.previousPosition,\n      );\n      const previousScroll = dynamicBarRef.current.dataset.previousScroll;\n\n      let state = 'noscroll';\n\n      if (previousPosition < window.pageYOffset) {\n        state = 'scrolldown';\n      } else if (previousPosition > window.pageYOffset) {\n        state = 'scrollup';\n      }\n\n      dynamicBarRef.current.dataset.previousPosition = String(\n          window.pageYOffset,\n      );\n\n      if (\n        state !== previousScroll &&\n        state !== 'noscroll'\n      ) {\n        toggleVisibility(dynamicBarRef, state === 'scrollup');\n      }\n\n      dynamicBarRef.current.dataset.previousScroll = state;\n    }\n\n    window.addEventListener('scroll', scrollEventHandler);\n\n    return () => window.removeEventListener('scroll', scrollEventHandler);\n  }, []);\n}\n\nexport default function DynamicTopBar<\nT extends React.PropsWithChildren<BoxProps>\n>(\n    props: T,\n) {\n  const reference = useRef() as MutableRefObject<HTMLElement>;\n  useScrollHook(reference);\n\n  return (\n    <div ref={reference as any} className=\"dynamicTopBar\">\n      <Header\n        elevation=\"small\"\n        background=\"brand\"\n        fill\n        {...props}\n      >\n        {props.children}\n      </Header>\n    </div>\n  );\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable require-jsdoc */\nimport React from 'react';\nimport {useContext, useState} from 'react';\nimport {ResponsiveContext} from 'grommet';\nimport {Link} from 'gatsby';\nimport DynamicTopBar from './dynamicTopBar';\n\nimport {useResponsiveWatcher} from '../utils/responsiveWatcher';\n// const ResponsiveWatcher = require('../utils/responsiveWatcher');\n\nimport '../styles/headerBar.scss';\nconst logo = require('../images/logo.svg');\nconst logoHover = require('../images/logoHover.svg');\n\nfunction Entry(props: React.PropsWithChildren<{path: string}>) {\n  return (\n    <div className=\"headerEntry\">\n      <Link to={props.path}>\n        {props.children}\n      </Link>\n    </div>\n  );\n}\n\nexport default function HeaderBar() {\n  // const bigScreen =\n  //   useContext(ResponsiveContext) === 'large' ||\n  //   useContext(ResponsiveContext) === 'xlarge';\n  const bigScreen = useResponsiveWatcher();\n  const [currentLogo, setLogo] = useState(logo);\n\n  const logoElement = (\n    <img\n      src={currentLogo}\n      className=\"projectLogo\"\n      onMouseOver={() => setLogo(logoHover)}\n      onMouseOut={() => setLogo(logo)}\n    />\n  );\n\n  return (\n    <DynamicTopBar\n      justify={(bigScreen)? 'start': 'evenly'}\n    >\n      {(bigScreen) ?\n      <>\n        <Entry path='/'>\n          {logoElement}\n          {/* <svg href={logo} className=\"projectLogo\" /> */}\n        </Entry>\n        <Entry path='/docs/start'>Learn</Entry>\n        <Entry path='/contact'>Contact</Entry>\n      </> :\n      <>\n        <Entry path='/docs/start'>Learn</Entry>\n        <Entry path='/'>\n          {logoElement}\n        </Entry>\n        <Entry path='/contact'>Contact</Entry>\n      </>\n      }\n    </DynamicTopBar>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/logo-0abf780bd9caada24200521295db473e.svg\";","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { string } from 'prop-types';\nimport React, {useEffect, useState} from 'react';\n\nexport class ResponsiveWatcher {\n  callbackMap: Map<Symbol, (bigScreen: boolean) => any>;\n  condition: MediaQueryList;\n\n  constructor(query = 'screen and (min-aspect-ratio: 4/3)') {\n    this.callbackMap = new Map();\n    this.condition = window.matchMedia(query);\n\n    this.condition.addEventListener('change', (event) => {\n      const newState = (event.target as any).matches;\n      const callbacks = Array.from(this.callbackMap.values());\n      callbacks.forEach((callback) => callback(newState));\n    });\n  }\n\n  get state() {\n    return this.condition.matches;\n  }\n\n  registerCallback(id: Symbol, callback: (bigScreen: boolean) => any) {\n    this.callbackMap.set(id, callback);\n  }\n\n  removeCallback(id: Symbol) {\n    this.callbackMap.delete(id);\n  }\n\n  containCallback(id: Symbol | ((bigScreen: boolean) => any)) {\n    if (id instanceof Symbol) {\n      return this.callbackMap.has(id);\n    } else {\n      return Array.from(this.callbackMap.values()).includes(id)\n    }\n  }\n}\n\nconst defaultWatcher: any = (typeof window !== 'undefined')? new ResponsiveWatcher(): '';\n// const watchers: Map<string, ResponsiveWatcher> = new Map();\n\n// Modificar o código abaixo para funcionar na hipótese do objeto window sumir\nexport function useResponsiveWatcher(customWatcher?: ResponsiveWatcher): boolean {\n    if(typeof window !== 'undefined') {\n      const watcher = customWatcher ?? defaultWatcher;\n\n      const callbackId = useState(Symbol())[0];\n      const [bigScreen, updateComponent] = useState(watcher.state);\n\n      // Register Callback Effect\n      useEffect(() => {\n        watcher.registerCallback(callbackId, updateComponent);\n      }, [updateComponent])\n\n      // Remove Callback Effect\n      useEffect(() => {\n        return () => watcher.removeCallback(callbackId);\n      }, [])\n\n      return bigScreen;\n    } else {\n      return false;\n    }\n}\n","module.exports = __webpack_public_path__ + \"static/logoHover-691294b15d5a74afa353fd99e67c13ca.svg\";"],"sourceRoot":""}